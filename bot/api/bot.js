import { Telegraf } from 'telegraf';

export default async function handler(req, res) {
  console.log('ü§ñ Bot command handler called');
  
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!BOT_TOKEN) {
      return res.status(500).json({ error: 'Bot token not configured' });
    }

    const bot = new Telegraf(BOT_TOKEN);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    bot.command('webapp', async (ctx) => {
      console.log('üì± WebApp command triggered');
      
      const message = `üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —É—Å–ª—É–≥!
      
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:`;

      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: [[{
            text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
            web_app: { url: 'https://tma-webapp-store.netlify.app' }
          }]]
        }
      });
    });
    
    bot.command('test', async (ctx) => {
      console.log('üß™ Test command triggered');
      await ctx.reply('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webapp –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞.');
    });
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç—É
    await bot.handleUpdate(req.body);
    
    console.log('‚úÖ Bot command processed successfully');
    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('‚ùå Bot command error:', error);
    res.status(500).json({ error: 'Internal server error', details: error.message });
  }
}
