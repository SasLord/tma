import { Telegraf } from 'telegraf';

export default async function handler(req, res) {
  console.log('üîß Set webhook handler called');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  try {
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not found');
      return res.status(500).json({ error: 'Bot token not configured' });
    }

    const bot = new Telegraf(BOT_TOKEN);
    const webhookUrl = 'https://bot-blue-five.vercel.app/api/webhook';
    
    console.log('üìç Setting webhook URL:', webhookUrl);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await bot.telegram.setWebhook(webhookUrl);
    
    console.log('‚úÖ Webhook set successfully');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    const webhookInfo = await bot.telegram.getWebhookInfo();
    console.log('üìã Webhook info:', webhookInfo);
    
    res.status(200).json({ 
      success: true, 
      message: 'Webhook set successfully',
      webhookUrl: webhookUrl,
      webhookInfo: webhookInfo,
      timestamp: new Date().toISOString() 
    });
    
  } catch (error) {
    console.error('‚ùå Set webhook error:', error);
    res.status(500).json({ 
      error: 'Failed to set webhook', 
      details: error.message 
    });
  }
}
