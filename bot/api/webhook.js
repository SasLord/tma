import { Telegraf } from 'telegraf';

export default async function handler(req, res) {
  console.log('üîó Webhook handler called');
  console.log('Method:', req.method);
  console.log('Body:', JSON.stringify(req.body, null, 2));
  
  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ CORS preflight request');
    return res.status(200).end();
  }
  
  if (req.method !== 'POST') {
    console.log('‚ùå Invalid method:', req.method);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not found');
      return res.status(500).json({ error: 'Bot token not configured' });
    }

    const bot = new Telegraf(BOT_TOKEN);
    const ADMIN_CHAT_ID = '1155907659';
    
    // === –ü–†–û–°–¢–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê HTTP –ó–ê–ö–ê–ó–û–í ===
    if (req.body.services && Array.isArray(req.body.services)) {
      console.log('üåê HTTP order received');
      
      const services = req.body.services;
      const totalPrice = services.reduce((sum, s) => sum + s.price, 0);
      const platform = req.body.platform || 'HTTP';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
      const servicesList = services.map(service => 
        '‚Ä¢ ' + service.name + ' - ' + service.price + '‚ÇΩ'
      ).join('\n');

      // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = 'üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ WebApp!\n\n' +
        'üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:\n' + servicesList + '\n\n' +
        'üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ' + totalPrice + '‚ÇΩ\n' +
        'üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' + platform + '\n' +
        'üìÖ –í—Ä–µ–º—è: ' + new Date().toLocaleString('ru-RU');

      try {
        await bot.telegram.sendMessage(ADMIN_CHAT_ID, message);
        console.log('‚úÖ HTTP order sent to admin');
        return res.status(200).json({ success: true, message: 'Order processed' });
      } catch (sendError) {
        console.error('‚ùå Failed to send message:', sendError);
        return res.status(500).json({ error: 'Failed to send message', details: sendError.message });
      }
    }
    
    // === –û–ë–†–ê–ë–û–¢–ö–ê TELEGRAM WEB_APP_DATA ===
    const webAppData = req.body.message?.web_app_data || req.body.web_app_data;
    
    if (webAppData && webAppData.data) {
      console.log('üì± Telegram WebApp data received');
      
      try {
        const parsedData = JSON.parse(webAppData.data);
        const user = req.body.message?.from || req.body.from;
        
        // –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ ID
        const availableServices = [
          { id: '1', name: '–£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã', price: 3000 },
          { id: '2', name: '–ú—ã—Ç—å–µ –æ–∫–æ–Ω', price: 1500 },
          { id: '3', name: '–•–∏–º—á–∏—Å—Ç–∫–∞ –¥–∏–≤–∞–Ω–∞', price: 2500 },
          { id: '4', name: '–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞', price: 5000 }
        ];
        
        let services = [];
        let totalPrice = 0;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if (parsedData.serviceIds && Array.isArray(parsedData.serviceIds)) {
          services = parsedData.serviceIds.map(id => 
            availableServices.find(s => s.id === id)
          ).filter(Boolean);
          totalPrice = parsedData.totalPrice || services.reduce((sum, s) => sum + s.price, 0);
        } else if (parsedData.services && Array.isArray(parsedData.services)) {
          services = parsedData.services;
          totalPrice = parsedData.total || services.reduce((sum, s) => sum + s.price, 0);
        }
        
        if (services.length > 0) {
          const servicesList = services.map(service => 
            '‚Ä¢ ' + service.name + ' - ' + service.price + '‚ÇΩ'
          ).join('\n');
          
          const userName = user ? (user.first_name || '') + ' ' + (user.last_name || '') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

          const message = 'üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ WebApp!\n\n' +
            'üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:\n' + servicesList + '\n\n' +
            'üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ' + totalPrice + '‚ÇΩ\n' +
            'üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + userName.trim() + '\n' +
            'üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Telegram WebApp\n' +
            'üìÖ –í—Ä–µ–º—è: ' + new Date().toLocaleString('ru-RU');

          await bot.telegram.sendMessage(ADMIN_CHAT_ID, message);
          console.log('‚úÖ Telegram WebApp order sent to admin');
          
          // –û—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ answerWebAppQuery –µ—Å–ª–∏ –µ—Å—Ç—å query_id
          if (webAppData.query_id) {
            try {
              await bot.telegram.answerWebAppQuery(webAppData.query_id, {
                type: 'article',
                id: 'success',
                title: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!',
                input_message_content: {
                  message_text: '‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n–°—É–º–º–∞: ' + totalPrice + '‚ÇΩ'
                }
              });
            } catch (err) {
              console.log('‚ö†Ô∏è answerWebAppQuery failed:', err.message);
            }
          }
        }
      } catch (parseError) {
        console.error('‚ùå Failed to parse WebApp data:', parseError);
      }
    }
    
    // === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ===
    bot.command('webapp', async (ctx) => {
      console.log('üì± WebApp command triggered');
      await ctx.reply('üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —É—Å–ª—É–≥!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:', {
        reply_markup: {
          inline_keyboard: [[{
            text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
            web_app: { url: 'https://tma-webapp-store.netlify.app' }
          }]]
        }
      });
    });
    
    bot.command('test', async (ctx) => {
      console.log('üß™ Test command triggered');
      await ctx.reply('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webapp –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞.');
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegraf
    await bot.handleUpdate(req.body);
    
    console.log('‚úÖ Webhook processed successfully');
    res.status(200).json({ ok: true });
    
  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    res.status(500).json({ error: 'Internal server error', details: error.message });
  }
}
