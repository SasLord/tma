import { Telegraf } from 'telegraf';

export default async function handler(req, res) {
  console.log('üîó Webhook handler called');
  console.log('Method:', req.method);
  console.log('URL:', req.url);
  
  if (req.method !== 'POST') {
    console.log('‚ùå Invalid method:', req.method);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    console.log('üì® Processing webhook update:', JSON.stringify(req.body, null, 2));
    
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not found');
      return res.status(500).json({ error: 'Bot token not configured' });
    }

    const bot = new Telegraf(BOT_TOKEN);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ web_app_data –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (req.body.message && req.body.message.web_app_data) {
      console.log('üì± Found web_app_data in message:', req.body.message.web_app_data);
      
      try {
        const webAppData = JSON.parse(req.body.message.web_app_data.data);
        console.log('üìã Parsed order data:', webAppData);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
        const servicesList = webAppData.services.map(service => 
          `‚Ä¢ ${service.name} - ${service.price}‚ÇΩ`
        ).join('\n');
        
        const message = `üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ WebApp!

üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:
${servicesList}

üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${webAppData.total}‚ÇΩ

üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${req.body.message.from.first_name} ${req.body.message.from.last_name || ''}
üìÖ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${new Date().toLocaleString('ru-RU')}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        const ADMIN_CHAT_ID = '1155907659';
        console.log('üì§ Sending order to admin:', ADMIN_CHAT_ID);
        
        await bot.telegram.sendMessage(ADMIN_CHAT_ID, message);
        
        // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ answerWebAppQuery
        if (req.body.message.web_app_data.query_id) {
          await bot.telegram.answerWebAppQuery(req.body.message.web_app_data.query_id, {
            type: 'article',
            id: 'order_success',
            title: '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!',
            input_message_content: {
              message_text: `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n–°—É–º–º–∞: ${webAppData.total}‚ÇΩ\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`
            }
          });
        }
        
        console.log('‚úÖ WebApp order processed successfully');
      } catch (error) {
        console.error('‚ùå Error processing web_app_data:', error);
        
        // –û—Ç–≤–µ—á–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        if (req.body.message.web_app_data.query_id) {
          await bot.telegram.answerWebAppQuery(req.body.message.web_app_data.query_id, {
            type: 'article',
            id: 'order_error',
            title: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞',
            input_message_content: {
              message_text: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
            }
          });
        }
      }
    } else {
      console.log('‚ÑπÔ∏è No web_app_data found in update');
    }
    
    // –¢–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ Telegraf –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
    bot.on('web_app_data', async (ctx) => {
      console.log('üì± Telegraf web_app_data handler triggered:', ctx.webAppData);
      // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –Ω–µ –≤—ã–∑–≤–∞—Ç—å—Å—è –≤ serverless —Å—Ä–µ–¥–µ
    });
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç—É
    await bot.handleUpdate(req.body);
    
    console.log('‚úÖ Webhook processed successfully');
    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    res.status(500).json({ error: 'Internal server error', details: error.message });
  }
}
