import { Telegraf } from 'telegraf'
import {
  saveOrder,
  getAllOrders,
  clearAllOrders,
  isAdmin,
  addAdmin,
  removeAdmin,
  updateAdmin,
  getAllAdmins,
  isSuperAdmin
} from './database.js'

const SUPER_ADMIN_ID = '1155907659' // ID —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

export const handler = async (event) => {
  console.log('üîó Netlify webhook handler called')
  console.log('Method:', event.httpMethod)
  console.log('Body:', event.body)

  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type'
  }

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
  async function sendToAllAdmins(message, botInstance) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      const admins = await getAllAdmins()
      console.log(`üìã Found ${admins.length} admins to notify`)

      if (admins.length === 0) {
        console.log('‚ö†Ô∏è No admins found to notify')
        return { success: false, sent: 0, total: 0, error: 'No admins found' }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      const promises = admins.map(async (admin) => {
        try {
          console.log(`üì§ Sending message to admin ${admin.user_id} (${admin.name})`)
          const result = await botInstance.telegram.sendMessage(admin.user_id, message)
          console.log(`‚úÖ Message sent to admin ${admin.user_id}`)
          return result
        } catch (error) {
          console.error(`‚ùå Failed to send message to admin ${admin.user_id}:`, error.message)
          return null
        }
      })

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
      const results = await Promise.all(promises)
      const successful = results.filter((r) => r !== null).length

      console.log(`üì® Message sent to ${successful}/${admins.length} admins`)
      return { success: successful > 0, sent: successful, total: admins.length }
    } catch (error) {
      console.error('‚ùå Failed to send to all admins:', error)
      return { success: false, error: error.message, sent: 0, total: 0 }
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
  if (event.httpMethod === 'OPTIONS') {
    console.log('‚úÖ CORS preflight request')
    return {
      statusCode: 200,
      headers,
      body: ''
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GET –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  if (event.httpMethod === 'GET') {
    console.log('üìñ GET request processing')
    const queryParams = event.queryStringParameters || {}

    if (queryParams.type === 'get_orders') {
      const userId = queryParams.user_id
      if (!userId || !(await isAdmin(userId))) {
        return {
          statusCode: 403,
          headers,
          body: JSON.stringify({ error: 'Access denied' })
        }
      }

      const orders = await getAllOrders()
      console.log('üìã Retrieved orders:', orders.length)
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ orders })
      }
    }

    if (queryParams.type === 'check_admin') {
      const userId = queryParams.user_id
      const adminStatus = await isAdmin(userId)
      console.log('üë§ Admin check for user:', userId, 'Result:', adminStatus)
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ isAdmin: adminStatus })
      }
    }

    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: 'Invalid GET request type' })
    }
  }

  if (event.httpMethod !== 'POST') {
    console.log('‚ùå Invalid method:', event.httpMethod)
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    }
  }

  try {
    const BOT_TOKEN = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN

    if (!BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not found')
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: 'Bot token not configured' })
      }
    }

    const bot = new Telegraf(BOT_TOKEN)
    const ADMIN_CHAT_ID = '1155907659'
    const WEBAPP_URL = 'https://tma-webapp-store.netlify.app/'

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Menu Button (–∫–Ω–æ–ø–∫–∞ "Open" –≤ –º–µ–Ω—é —á–∞—Ç–∞)
    const setupMenuButton = async () => {
      try {
        await bot.telegram.setChatMenuButton({
          menu_button: {
            type: 'web_app',
            text: 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥',
            web_app: {
              url: WEBAPP_URL
            }
          }
        })
        console.log('‚úÖ Menu button updated successfully')
      } catch (error) {
        console.error('‚ùå Failed to set menu button:', error)
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Menu Button –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    await setupMenuButton()

    // –ü–∞—Ä—Å–∏–º JSON –∏–∑ event.body
    let requestBody
    try {
      requestBody = JSON.parse(event.body)
    } catch (e) {
      console.error('‚ùå Failed to parse JSON:', e)
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Invalid JSON' })
      }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê TELEGRAM BOT UPDATES ===
    if (requestBody.update_id || requestBody.message || requestBody.callback_query) {
      console.log('ü§ñ Telegram bot update received')

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
      bot.start((ctx) => {
        const welcomeMessage =
          'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!\n\n' +
          'üõçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /webapp —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥\n' +
          'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ –≤ Telegram!'

        ctx.reply(welcomeMessage, {
          reply_markup: {
            inline_keyboard: [[{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url: WEBAPP_URL } }]]
          }
        })
      })

      bot.command('webapp', (ctx) => {
        console.log('üåê /webapp command triggered')

        const message =
          'üõçÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!\n\n' +
          'üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏'

        ctx.reply(message, {
          reply_markup: {
            inline_keyboard: [[{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥', web_app: { url: WEBAPP_URL } }]]
          }
        })
      })

      bot.help((ctx) => {
        const helpMessage =
          'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
          '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
          '/webapp - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥\n' +
          '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n' +
          '/updatemenu - –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n' +
          'üõéÔ∏è –î–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!'

        ctx.reply(helpMessage)
      })

      // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Menu Button (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
      bot.command('updatemenu', async (ctx) => {
        const userId = ctx.from.id.toString()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const userIsAdmin = await isAdmin(userId)
        const userIsSuperAdmin = await isSuperAdmin(userId)
        
        if (!userIsAdmin && !userIsSuperAdmin) {
          ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
          return
        }

        try {
          await setupMenuButton()
          ctx.reply('‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
          console.log(`üîÑ Menu button updated by admin ${userId}`)
        } catch (error) {
          ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é')
          console.error('‚ùå Menu button update failed:', error)
        }
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      bot.on('web_app_data', (ctx) => {
        console.log('üì± Web app data received:', ctx.webAppData)

        try {
          const data = JSON.parse(ctx.webAppData.data)
          console.log('üìä Parsed web app data:', data)
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          ctx.reply('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è!')
        } catch (error) {
          console.error('‚ùå Failed to parse web app data:', error)
          ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
        }
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      bot.on('text', (ctx) => {
        const message =
          'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /webapp –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥\n' +
          '–ò–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏'

        ctx.reply(message, {
          reply_markup: {
            inline_keyboard: [[{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url: WEBAPP_URL } }]]
          }
        })
      })

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      try {
        await bot.handleUpdate(requestBody)
        console.log('‚úÖ Telegram update processed')

        return {
          statusCode: 200,
          headers,
          body: JSON.stringify({ success: true, message: 'Update processed' })
        }
      } catch (botError) {
        console.error('‚ùå Bot error:', botError)
        return {
          statusCode: 500,
          headers,
          body: JSON.stringify({ error: 'Bot processing failed', details: botError.message })
        }
      }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–û–í –ß–ï–†–ï–ó SDK ===
    if (requestBody.services && Array.isArray(requestBody.services)) {
      console.log('üåê Order received via Telegram SDK')

      const services = requestBody.services
      const totalPrice = requestBody.totalPrice || services.reduce((sum, s) => sum + s.price, 0)
      const platform = requestBody.platform || 'HTTP'
      const user = requestBody.user
      const orderType = requestBody.type || 'order'

      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const orderId = await saveOrder({
          services,
          totalPrice,
          platform,
          user,
          type: orderType
        })
        console.log(`‚úÖ Order saved to database with ID: ${orderId}`)
      } catch (dbError) {
        console.error('‚ùå Failed to save order to database:', dbError)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
      const servicesList = services
        .map((service) => '‚Ä¢ ' + service.name + ' - ' + service.price.toLocaleString() + '‚ÇΩ')
        .join('\n')

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      let userInfo = ''
      if (user) {
        userInfo =
          'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' +
          (user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') +
          ' ' +
          (user.last_name || '') +
          '\n' +
          'üÜî ID: ' +
          (user.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') +
          '\n' +
          'üë§ Username: @' +
          (user.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') +
          '\n\n'
      }

      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ SDK
      const message =
        'üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram WebApp!\n\n' +
        userInfo +
        'üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:\n' +
        servicesList +
        '\n\n' +
        'üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ' +
        totalPrice.toLocaleString() +
        '‚ÇΩ\n' +
        'üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' +
        platform +
        '\n' +
        'üì± –¢–∏–ø: ' +
        orderType +
        '\n' +
        'üìÖ –í—Ä–µ–º—è: ' +
        new Date().toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        })

      try {
        const sendResult = await sendToAllAdmins(message, bot)
        console.log(`‚úÖ SDK order sent to admins: ${sendResult.sent}/${sendResult.total}`)
        return {
          statusCode: 200,
          headers,
          body: JSON.stringify({
            success: true,
            message: 'Order processed via Telegram SDK',
            orderType,
            totalPrice,
            servicesCount: services.length,
            notifiedAdmins: sendResult.sent
          })
        }
      } catch (sendError) {
        console.error('‚ùå Failed to send message:', sendError)
        return {
          statusCode: 500,
          headers,
          body: JSON.stringify({ error: 'Failed to send message', details: sendError.message })
        }
      }
    }

    // === API –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø ===
    if (requestBody.action) {
      const userId = requestBody.user?.id?.toString()

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
      if (requestBody.action === 'check_admin') {
        console.log('üîç Admin check request for user:', userId)

        const userIsAdmin = await isAdmin(userId)
        const userIsSuperAdmin = await isSuperAdmin(userId)

        console.log(
          `üë§ User ${userId} - isAdmin: ${userIsAdmin}, isSuperAdmin: ${userIsSuperAdmin}`
        )

        return {
          statusCode: 200,
          headers,
          body: JSON.stringify({
            success: true,
            isAdmin: userIsAdmin,
            isSuperAdmin: userIsSuperAdmin
          })
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      if (!userId || !(await isAdmin(userId))) {
        return {
          statusCode: 403,
          headers,
          body: JSON.stringify({ error: 'Access denied. Admin privileges required.' })
        }
      }

      switch (requestBody.action) {
        case 'get_orders':
          try {
            const orders = await getAllOrders()
            return {
              statusCode: 200,
              headers,
              body: JSON.stringify({ success: true, orders })
            }
          } catch (error) {
            return {
              statusCode: 500,
              headers,
              body: JSON.stringify({ error: 'Failed to get orders', details: error.message })
            }
          }

        case 'clear_orders':
          try {
            // –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
            const isSuper = await isSuperAdmin(userId)
            if (!isSuper) {
              return {
                statusCode: 403,
                headers,
                body: JSON.stringify({ error: 'Only super admin can clear all orders' })
              }
            }

            await clearAllOrders()
            return {
              statusCode: 200,
              headers,
              body: JSON.stringify({ success: true, message: 'All orders cleared successfully' })
            }
          } catch (error) {
            return {
              statusCode: 500,
              headers,
              body: JSON.stringify({ error: 'Failed to clear orders', details: error.message })
            }
          }

        case 'get_admins':
          try {
            const adminsList = await getAllAdmins()
            return {
              statusCode: 200,
              headers,
              body: JSON.stringify({ success: true, admins: adminsList })
            }
          } catch (error) {
            return {
              statusCode: 500,
              headers,
              body: JSON.stringify({ error: 'Failed to get admins', details: error.message })
            }
          }

        case 'get_user_data':
          try {
            const { targetUserId } = requestBody
            if (!targetUserId) {
              return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: 'Target user ID is required' })
              }
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram Bot API
            try {
              const chatInfo = await bot.telegram.getChat(targetUserId)
              const userData = {
                id: chatInfo.id,
                first_name: chatInfo.first_name,
                last_name: chatInfo.last_name,
                username: chatInfo.username
              }

              return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ success: true, userData })
              }
            } catch (error) {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ Telegram API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
              console.error('‚ùå Failed to get user data from Telegram:', error)
              return {
                statusCode: 404,
                headers,
                body: JSON.stringify({
                  success: false,
                  error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –µ–≥–æ –¥–∞–Ω–Ω—ã–º'
                })
              }
            }
          } catch (error) {
            return {
              statusCode: 500,
              headers,
              body: JSON.stringify({ error: 'Failed to get user data', details: error.message })
            }
          }

        case 'add_admin':
          try {
            const { targetUserId, targetUserName, targetUsername } = requestBody
            if (!targetUserId) {
              return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: 'Target user ID is required' })
              }
            }

            const newAdmin = await addAdmin(targetUserId, targetUserName, targetUsername)
            if (newAdmin) {
              return {
                statusCode: 200,
                headers,
                body: JSON.stringify({
                  success: true,
                  message: 'Admin added successfully',
                  admin: newAdmin
                })
              }
            } else {
              return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: 'Admin already exists or invalid data' })
              }
            }
          } catch (error) {
            return {
              statusCode: 500,
              headers,
              body: JSON.stringify({ error: 'Failed to add admin', details: error.message })
            }
          }

        case 'remove_admin':
          try {
            const { targetUserId } = requestBody
            if (!targetUserId) {
              return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: 'Target user ID is required' })
              }
            }

            const result = await removeAdmin(targetUserId, userId)
            if (result.success) {
              return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ success: true, message: 'Admin removed successfully' })
              }
            } else {
              return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: result.error })
              }
            }
          } catch (error) {
            return {
              statusCode: 500,
              headers,
              body: JSON.stringify({ error: 'Failed to remove admin', details: error.message })
            }
          }

        case 'update_admin':
          try {
            const { targetUserId, updates } = requestBody
            if (!targetUserId) {
              return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: 'Target user ID is required' })
              }
            }

            const result = await updateAdmin(targetUserId, updates)
            if (result.success) {
              return {
                statusCode: 200,
                headers,
                body: JSON.stringify({
                  success: true,
                  message: 'Admin updated successfully',
                  admin: result.admin
                })
              }
            } else {
              return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: result.error })
              }
            }
          } catch (error) {
            return {
              statusCode: 500,
              headers,
              body: JSON.stringify({ error: 'Failed to update admin', details: error.message })
            }
          }

        default:
          return {
            statusCode: 400,
            headers,
            body: JSON.stringify({ error: 'Unknown action' })
          }
      }
    }

    console.log('‚ùå No valid services in request')
    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: 'No services provided' })
    }
  } catch (error) {
    console.error('‚ùå Webhook error:', error)
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Internal server error', details: error.message })
    }
  }
}
