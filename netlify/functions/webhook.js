import { Telegraf } from 'telegraf'

exports.handler = async (event) => {
  console.log('üîó Netlify webhook handler called')
  console.log('Method:', event.httpMethod)
  console.log('Body:', event.body)

  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type'
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
  if (event.httpMethod === 'OPTIONS') {
    console.log('‚úÖ CORS preflight request')
    return {
      statusCode: 200,
      headers,
      body: ''
    }
  }

  if (event.httpMethod !== 'POST') {
    console.log('‚ùå Invalid method:', event.httpMethod)
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    }
  }

  try {
    const BOT_TOKEN = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN

    if (!BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not found')
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: 'Bot token not configured' })
      }
    }

    const bot = new Telegraf(BOT_TOKEN)
    const ADMIN_CHAT_ID = '1155907659'
    const WEBAPP_URL = 'https://tma-webapp-store.netlify.app/'

    // –ü–∞—Ä—Å–∏–º JSON –∏–∑ event.body
    let requestBody
    try {
      requestBody = JSON.parse(event.body)
    } catch (e) {
      console.error('‚ùå Failed to parse JSON:', e)
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Invalid JSON' })
      }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê TELEGRAM BOT UPDATES ===
    if (requestBody.update_id || requestBody.message || requestBody.callback_query) {
      console.log('ü§ñ Telegram bot update received')

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
      bot.start((ctx) => {
        const welcomeMessage =
          'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!\n\n' +
          'üõçÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /webapp —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥\n' +
          'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ –≤ Telegram!'

        ctx.reply(welcomeMessage, {
          reply_markup: {
            inline_keyboard: [[{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url: WEBAPP_URL } }]]
          }
        })
      })

      bot.command('webapp', (ctx) => {
        console.log('üåê /webapp command triggered')

        const message =
          'üõçÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!\n\n' +
          'üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏'

        ctx.reply(message, {
          reply_markup: {
            inline_keyboard: [[{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥', web_app: { url: WEBAPP_URL } }]]
          }
        })
      })

      bot.help((ctx) => {
        const helpMessage =
          'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
          '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
          '/webapp - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥\n' +
          '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
          'üõéÔ∏è –î–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!'

        ctx.reply(helpMessage)
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      bot.on('web_app_data', (ctx) => {
        console.log('üì± Web app data received:', ctx.webAppData)

        try {
          const data = JSON.parse(ctx.webAppData.data)
          console.log('üìä Parsed web app data:', data)
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          ctx.reply('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è!')
        } catch (error) {
          console.error('‚ùå Failed to parse web app data:', error)
          ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
        }
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      bot.on('text', (ctx) => {
        const message =
          'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /webapp –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ª—É–≥\n' +
          '–ò–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏'

        ctx.reply(message, {
          reply_markup: {
            inline_keyboard: [[{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url: WEBAPP_URL } }]]
          }
        })
      })

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      try {
        await bot.handleUpdate(requestBody)
        console.log('‚úÖ Telegram update processed')

        return {
          statusCode: 200,
          headers,
          body: JSON.stringify({ success: true, message: 'Update processed' })
        }
      } catch (botError) {
        console.error('‚ùå Bot error:', botError)
        return {
          statusCode: 500,
          headers,
          body: JSON.stringify({ error: 'Bot processing failed', details: botError.message })
        }
      }
    }

    // === –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–û–í –ß–ï–†–ï–ó SDK ===
    if (requestBody.services && Array.isArray(requestBody.services)) {
      console.log('üåê Order received via Telegram SDK')

      const services = requestBody.services
      const totalPrice = requestBody.totalPrice || services.reduce((sum, s) => sum + s.price, 0)
      const platform = requestBody.platform || 'HTTP'
      const user = requestBody.user
      const orderType = requestBody.type || 'order'

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
      const servicesList = services
        .map((service) => '‚Ä¢ ' + service.name + ' - ' + service.price.toLocaleString() + '‚ÇΩ')
        .join('\n')

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      let userInfo = ''
      if (user) {
        userInfo =
          'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' +
          (user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') +
          ' ' +
          (user.last_name || '') +
          '\n' +
          'üÜî ID: ' +
          (user.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') +
          '\n' +
          'üë§ Username: @' +
          (user.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') +
          '\n\n'
      }

      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ SDK
      const message =
        'üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram WebApp!\n\n' +
        userInfo +
        'üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:\n' +
        servicesList +
        '\n\n' +
        'üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ' +
        totalPrice.toLocaleString() +
        '‚ÇΩ\n' +
        'üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ' +
        platform +
        '\n' +
        'üì± –¢–∏–ø: ' +
        orderType +
        '\n' +
        'üìÖ –í—Ä–µ–º—è: ' +
        new Date().toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        })

      try {
        await bot.telegram.sendMessage(ADMIN_CHAT_ID, message)
        console.log('‚úÖ SDK order sent to admin')
        return {
          statusCode: 200,
          headers,
          body: JSON.stringify({
            success: true,
            message: 'Order processed via Telegram SDK',
            orderType,
            totalPrice,
            servicesCount: services.length
          })
        }
      } catch (sendError) {
        console.error('‚ùå Failed to send message:', sendError)
        return {
          statusCode: 500,
          headers,
          body: JSON.stringify({ error: 'Failed to send message', details: sendError.message })
        }
      }
    }

    console.log('‚ùå No valid services in request')
    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: 'No services provided' })
    }
  } catch (error) {
    console.error('‚ùå Webhook error:', error)
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Internal server error', details: error.message })
    }
  }
}
