// utils/telegram.ts
// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp API

interface ServiceOrder {
  id: string;
  name: string;
  price: number;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑—å —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram WebApp API
 */
export async function checkBotConnection() {
  try {
    console.log('üîç Checking bot connection through Telegram WebApp...');
    
    if (!window.Telegram?.WebApp) {
      throw new Error('Telegram WebApp not available');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (window.Telegram.WebApp.initData) {
      console.log('‚úÖ Telegram WebApp has initData');
      return { 
        status: 'ok', 
        method: 'telegram_webapp', 
        hasInitData: true,
        timestamp: new Date().toISOString(),
        telegram: 'WebApp connection ready'
      };
    } else {
      console.log('‚ö†Ô∏è Telegram WebApp available but no initData');
      return { 
        status: 'ok', 
        method: 'telegram_webapp', 
        hasInitData: false,
        timestamp: new Date().toISOString(),
        telegram: 'WebApp available but no initData'
      };
    }
  } catch (error) {
    console.error('‚ùå Bot connection failed:', error);
    // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    try {
      const response = await fetch('https://bot-iv9v10czu-madsas-projects-2f94475c.vercel.app/api/cors-test', {
        method: 'GET',
        mode: 'cors'
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Direct connection OK:', result);
      return result;
    } catch (fetchError) {
      console.error('‚ùå Direct connection also failed:', fetchError);
      throw error;
    }
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –≤ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π API Telegram
 */
export async function sendOrderToBot(services: ServiceOrder[]) {
  console.log('üöÄ sendOrderToBot called with services:', services);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
  if (!window.Telegram?.WebApp) {
    console.error('‚ùå Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    throw new Error('Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }

  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const orderData = {
      services: services,
      total: services.reduce((sum, service) => sum + service.price, 0),
      timestamp: Date.now()
    };
    
    console.log('üì§ Sending order data through Telegram WebApp:', orderData);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    window.Telegram.WebApp.sendData(JSON.stringify(orderData));
    
    console.log('‚úÖ Order sent successfully through Telegram WebApp');
    return { success: true, method: 'telegram_senddata' };
    
  } catch (error) {
    console.error('‚ùå Error in sendOrderToBot:', error);
    
    // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
    console.log('üîÑ Trying fallback HTTP request...');
    return await sendOrderViaHTTP(services);
  }
}

/**
 * Fallback –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ HTTP (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
async function sendOrderViaHTTP(services: ServiceOrder[]) {
  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  let initData = '';
  if (window.Telegram?.WebApp?.initData) {
    initData = window.Telegram.WebApp.initData;
    console.log('üì± Telegram initData available:', initData);
  } else {
    console.warn('‚ö†Ô∏è No Telegram initData, using mock data for testing');
    // –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const mockUser = {
      id: 123456789,
      first_name: 'Test',
      last_name: 'User',
      username: 'testuser',
      language_code: 'en'
    };
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ initData
    const mockParams = new URLSearchParams();
    mockParams.set('user', JSON.stringify(mockUser));
    mockParams.set('auth_date', Math.floor(Date.now() / 1000).toString());
    mockParams.set('hash', 'mock_hash_for_testing');
    initData = mockParams.toString();
  }

  try {
    const requestData = {
      initData: initData,
      services: services,
    };
    
    console.log('üì§ Sending HTTP fallback request to bot:', requestData);
    
    const response = await fetch('https://bot-iv9v10czu-madsas-projects-2f94475c.vercel.app/api/webapp-data', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestData),
    });

    console.log('üì• Response status:', response.status);
    console.log('üì• Response headers:', Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Response not ok:', errorText);
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log('‚úÖ HTTP fallback success:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Error in HTTP fallback:', error);
    throw error;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –≤ Telegram
 */
export function showSendDataButton(selectedServices: ServiceOrder[], onSuccess?: () => void) {
  if (!window.Telegram?.WebApp) {
    console.warn('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return;
  }

  console.log('Setting up main button with services:', selectedServices);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
  window.Telegram.WebApp.MainButton.setText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑');
  window.Telegram.WebApp.MainButton.show();

  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  window.Telegram.WebApp.MainButton.offClick(() => {});

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è
  window.Telegram.WebApp.MainButton.onClick(() => {
    console.log('Main button clicked, sending order:', selectedServices);
    
    sendOrderToBot(selectedServices)
      .then((result) => {
        console.log('‚úÖ Order sent successfully:', result);
        
        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–µ—Ç–æ–¥ sendData, —Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ answerWebAppQuery
        // –∏ WebApp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∏–ª–∏ –ø–æ–∫–∞–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (result.method === 'telegram_senddata') {
          console.log('üì± Order sent via Telegram WebApp, waiting for bot response...');
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º popup, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç —Å–∞–º –æ—Ç–≤–µ—Ç–∏—Ç —á–µ—Ä–µ–∑ answerWebAppQuery
          if (onSuccess) onSuccess();
        } else {
          // Fallback HTTP –º–µ—Ç–æ–¥
          window.Telegram.WebApp.showPopup({
            title: '–£—Å–ø–µ—Ö!',
            message: '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            buttons: [{ type: 'ok' }]
          });
          
          if (onSuccess) onSuccess();
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
          setTimeout(() => {
            window.Telegram.WebApp.close();
          }, 1500);
        }
      })
      .catch((error) => {
        console.error('‚ùå Failed to send order:', error);
        window.Telegram.WebApp.showPopup({
          title: '–û—à–∏–±–∫–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          buttons: [{ type: 'ok' }]
        });
      });
  });
}

/**
 * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –±–æ—Ç–∞ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function notifyBotAction(action: string, data?: unknown) {
  if (!window.Telegram?.WebApp?.initData) {
    return;
  }

  try {
    await fetch('/api/bot/user-action', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        initData: window.Telegram.WebApp.initData,
        action,
        data
      }),
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
  }
}
