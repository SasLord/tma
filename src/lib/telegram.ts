// utils/telegram.ts
// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp API

interface ServiceOrder {
  id: string;
  name: string;
  price: number;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑—å —Å –±–æ—Ç–æ–º
 */
export async function checkBotConnection() {
  try {
    console.log('üîç Checking bot connection...');
    const response = await fetch('https://bot-3zebh5cbg-madsas-projects-2f94475c.vercel.app/api/health');
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Health check failed: ${response.status} - ${errorText}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ Bot connection OK:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Bot connection failed:', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –≤ –±–æ—Ç
 */
export async function sendOrderToBot(services: ServiceOrder[]) {
  console.log('üöÄ sendOrderToBot called with services:', services);
  
  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  let initData = '';
  if (window.Telegram?.WebApp?.initData) {
    initData = window.Telegram.WebApp.initData;
    console.log('üì± Telegram initData available:', initData);
  } else {
    console.warn('‚ö†Ô∏è No Telegram initData, using mock data for testing');
    // –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const mockUser = {
      id: 123456789,
      first_name: 'Test',
      last_name: 'User',
      username: 'testuser',
      language_code: 'en'
    };
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ initData
    const mockParams = new URLSearchParams();
    mockParams.set('user', JSON.stringify(mockUser));
    mockParams.set('auth_date', Math.floor(Date.now() / 1000).toString());
    mockParams.set('hash', 'mock_hash_for_testing');
    initData = mockParams.toString();
  }

  try {
    const requestData = {
      initData: initData,
      services: services,
    };
    
    console.log('üì§ Sending request to bot:', requestData);
    
    const response = await fetch('https://bot-3zebh5cbg-madsas-projects-2f94475c.vercel.app/api/webapp-data', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestData),
    });

    console.log('üì• Response status:', response.status);
    console.log('üì• Response headers:', Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Response not ok:', errorText);
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log('‚úÖ Success response:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Error in sendOrderToBot:', error);
    throw error;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –≤ Telegram
 */
export function showSendDataButton(selectedServices: ServiceOrder[], onSuccess?: () => void) {
  if (!window.Telegram?.WebApp) {
    console.warn('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return;
  }

  console.log('Setting up main button with services:', selectedServices);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
  window.Telegram.WebApp.MainButton.setText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑');
  window.Telegram.WebApp.MainButton.show();

  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  window.Telegram.WebApp.MainButton.offClick(() => {});

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è
  window.Telegram.WebApp.MainButton.onClick(() => {
    console.log('Main button clicked, sending order:', selectedServices);
    
    sendOrderToBot(selectedServices)
      .then(() => {
        window.Telegram.WebApp.showPopup({
          title: '–£—Å–ø–µ—Ö!',
          message: '–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
          buttons: [{ type: 'ok' }]
        });
        
        if (onSuccess) onSuccess();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
          window.Telegram.WebApp.close();
        }, 1500);
      })
      .catch(() => {
        window.Telegram.WebApp.showPopup({
          title: '–û—à–∏–±–∫–∞',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          buttons: [{ type: 'ok' }]
        });
      });
  });
}

/**
 * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –±–æ—Ç–∞ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function notifyBotAction(action: string, data?: unknown) {
  if (!window.Telegram?.WebApp?.initData) {
    return;
  }

  try {
    await fetch('/api/bot/user-action', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        initData: window.Telegram.WebApp.initData,
        action,
        data
      }),
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ—Ç–∞:', error);
  }
}
